import { Problem, DifficultyLevel } from '@/types/problem';

export const problems: Problem[] = [
  {
    id: '1',
    title: 'Build a Responsive Navigation Menu',
    difficulty: 'Easy' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Create a navigation menu that transforms into a hamburger menu on mobile devices. The menu should smoothly animate when opening and closing.',
    example: 'Input: Screen resize or hamburger click. Output: Smooth transition between desktop and mobile menu layouts.',
  },
  {
    id: '2',
    title: 'Image Carousel Slider',
    difficulty: 'Medium' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Build an image carousel that allows users to slide through multiple images. Include previous/next buttons and automatic sliding functionality.',
    example: 'Input: Click navigation or wait for auto-slide. Output: Smooth transition between images with proper controls.',
  },
  {
    id: '3',
    title: 'Interactive Star Rating Component',
    difficulty: 'Medium' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Create an interactive star rating component where users can hover and click to rate. Include half-star support, hover effects, and the ability to display both interactive and read-only versions. Stars should smoothly fill with color and provide visual feedback.',
    example: 'Input: User hovers over the third star. Output: First three stars highlight. On click, rating is set. Component can also display existing ratings in read-only mode.',
  },
  {
    id: '4',
    title: 'Form Validation',
    difficulty: 'Easy' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Implement client-side form validation for a registration form. Validate email format, password strength, and matching password confirmation.',
    example: 'Input: User enters invalid email. Output: Real-time feedback showing validation errors.',
  },
  {
    id: '5',
    title: 'Accordion Component',
    difficulty: 'Easy' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Create an accordion component that expands/collapses content sections. Include smooth animations and proper accessibility attributes.',
    example: 'Input: Click on accordion header. Output: Content panel smoothly expands or collapses.',
  },
  {
    id: '6',
    title: 'Drag and Drop Interface',
    difficulty: 'Hard' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Build a drag and drop interface where users can reorder items in a list. Include visual feedback during dragging and smooth animations.',
    example: 'Input: User drags an item to a new position. Output: List reorders with smooth animation.',
  },
  {
    id: '7',
    title: 'Custom Video Player',
    difficulty: 'Hard' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Create a custom video player with play/pause, volume control, progress bar, and fullscreen functionality. Style all controls consistently.',
    example: 'Input: User interacts with video controls. Output: Video player responds accordingly with visual feedback.',
  },
  {
    id: '8',
    title: 'Responsive Data Table',
    difficulty: 'Medium' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Build a responsive data table that works well on all screen sizes. Include sorting, filtering, and mobile-friendly view options.',
    example: 'Input: User sorts column or filters data. Output: Table updates dynamically with proper responsive layout.',
  },
  {
    id: '9',
    title: 'Custom Select Dropdown',
    difficulty: 'Medium' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Create a custom-styled select dropdown with search functionality. Include keyboard navigation and proper accessibility features.',
    example: 'Input: User types to search or uses arrow keys. Output: Dropdown filters options and allows selection.',
  },
  {
    id: '10',
    title: 'Infinite Scroll Gallery',
    difficulty: 'Hard' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Implement an infinite scroll image gallery that loads more images as the user scrolls down. Include loading states and error handling.',
    example: 'Input: User scrolls to bottom. Output: New images load seamlessly with loading indicator.',
  },
  {
    id: '11',
    title: 'Tabs Component',
    difficulty: 'Easy' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Build a tabbed interface that switches between different content panels. Include proper accessibility and keyboard navigation.',
    example: 'Input: Click tab or use arrow keys. Output: Content panel switches with smooth transition.',
  },
  {
    id: '12',
    title: 'Memory Card Game',
    difficulty: 'Medium' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Create a memory card matching game with flip animations. Include score tracking and win/lose conditions.',
    example: 'Input: User flips cards to find matches. Output: Cards animate and game tracks progress.',
  },
  {
    id: '13',
    title: 'Dynamic Search Filter',
    difficulty: 'Medium' as DifficultyLevel,
    tags: ['HTML', 'CSS', 'JavaScript'],
    description: 'Build a real-time search filter that filters items as the user types. Include debouncing and highlight matching text.',
    example: 'Input: User types search query. Output: List filters in real-time with highlighted matches.',
  }
];